<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.risk.controller.service.dao.DecisionResultNoticeDao">
    <resultMap id="BaseResultMap" type="com.risk.controller.service.entity.DecisionResultNotice">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="nid" property="nid" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="result" property="result" jdbcType="INTEGER"/>
        <result column="notice_num" property="noticeNum" jdbcType="INTEGER"/>
        <result column="reject_reasons" property="rejectReasons" jdbcType="VARCHAR"/>
        <result column="add_time" property="addTime" jdbcType="BIGINT"/>
        <result column="update_time" property="updateTime" jdbcType="BIGINT"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, nid, status,result, notice_num, reject_reasons, add_time, update_time
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from risk_decision_result_notice
        where id = #{id,jdbcType=BIGINT}
    </select>

    <!--查询需要重新通知的数据-->
    <select id="pushRiskResult" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from risk_decision_result_notice where status=2 AND notice_num <![CDATA[ <= ]]> #{noticeNum}
        <if test="nid != null and nid !=''">
            AND nid=#{nid}
        </if>
        ORDER BY add_time ASC limit 100
    </select>

    <select id="getByNid" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from risk_decision_result_notice
        where nid = #{nid} limit 1
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from risk_decision_result_notice
    where id = #{id,jdbcType=BIGINT}
  </delete>

    <insert id="insert" parameterType="com.risk.controller.service.entity.DecisionResultNotice">
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into risk_decision_result_notice (nid, status,result, notice_num,
        reject_reasons,  add_time,update_time)
        values (#{nid,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, #{result,jdbcType=INTEGER}, #{noticeNum,jdbcType=INTEGER},
        #{rejectReasons,jdbcType=VARCHAR}, #{addTime,jdbcType=BIGINT}, #{updateTime,jdbcType=BIGINT})
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.risk.controller.service.entity.DecisionResultNotice" >
        update risk_decision_result_notice
        <set >
            <if test="nid != null" >
                nid = #{nid,jdbcType=VARCHAR},
            </if>
            <if test="status != null" >
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="result != null" >
                result = #{result,jdbcType=INTEGER},
            </if>
            <if test="noticeNum != null" >
                notice_num = #{noticeNum,jdbcType=INTEGER},
            </if>
            <if test="rejectReasons != null" >
                reject_reasons = #{rejectReasons,jdbcType=VARCHAR},
            </if>
            <if test="addTime != null" >
                add_time = #{addTime,jdbcType=BIGINT},
            </if>
            <if test="updateTime != null" >
                update_time = #{updateTime,jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.risk.controller.service.entity.DecisionResultNotice">
    update risk_decision_result_notice
    set nid = #{nid,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      result = #{result,jdbcType=INTEGER},
      notice_num = #{noticeNum,jdbcType=INTEGER},
      reject_reasons = #{rejectReasons,jdbcType=VARCHAR},
      add_time = #{addTime,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>